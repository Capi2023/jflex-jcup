
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 25 16:12:38 PDT 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 25 16:12:38 PDT 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\007\003\000\002\007\003\000\002\005" +
    "\014\000\002\004\004\000\002\004\003\000\002\025\004" +
    "\000\002\025\003\000\002\006\004\000\002\010\012\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\013\003\000\002\013\004\000\002\012\011\000\002\014" +
    "\006\000\002\020\004\000\002\026\004\000\002\026\003" +
    "\000\002\017\005\000\002\015\007\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\021\012\000\002" +
    "\022\011\000\002\023\013\000\002\027\011\000\002\030" +
    "\004\000\002\033\004\000\002\033\003\000\002\032\007" +
    "\000\002\031\010\000\002\035\007\000\002\034\007\000" +
    "\002\036\003\000\002\036\003\000\002\037\004\000\002" +
    "\037\003\000\002\043\007\000\002\040\005\000\002\040" +
    "\003\000\002\042\004\000\002\042\003\000\002\044\004" +
    "\000\002\044\003\000\002\041\003\000\002\041\003\000" +
    "\002\045\007\000\002\046\005\000\002\046\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\010\000\002\051\007\000\002\052\005" +
    "\000\002\052\003\000\002\053\007\000\002\054\011\000" +
    "\002\055\007\000\002\056\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\024" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\053\004\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\077\010\001\002\000\004\100\011\001\002\000" +
    "\004\103\012\001\002\000\026\004\032\005\015\006\014" +
    "\011\022\025\033\033\013\035\020\053\024\104\uffb1\106" +
    "\016\001\002\000\004\077\326\001\002\000\004\077\307" +
    "\001\002\000\004\103\300\001\002\000\004\011\257\001" +
    "\002\000\004\104\231\001\002\000\004\077\225\001\002" +
    "\000\030\004\032\005\015\006\014\011\022\025\033\033" +
    "\013\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002" +
    "\000\004\111\157\001\002\000\030\004\032\005\015\006" +
    "\014\011\022\025\033\033\013\035\020\040\uffb1\053\024" +
    "\104\uffb1\106\016\001\002\000\004\011\152\001\002\000" +
    "\030\004\032\005\015\006\014\011\022\025\033\033\013" +
    "\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000" +
    "\030\004\032\005\015\006\014\011\022\025\033\033\013" +
    "\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000" +
    "\030\004\032\005\015\006\014\011\022\025\033\033\013" +
    "\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000" +
    "\030\004\032\005\015\006\014\011\022\025\033\033\013" +
    "\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000" +
    "\030\004\032\005\015\006\014\011\022\025\033\033\013" +
    "\035\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000" +
    "\004\077\055\001\002\000\004\077\043\001\002\000\030" +
    "\004\032\005\015\006\014\011\022\025\033\033\013\035" +
    "\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000\030" +
    "\004\032\005\015\006\014\011\022\025\033\033\013\035" +
    "\020\040\uffb1\053\024\104\uffb1\106\016\001\002\000\006" +
    "\040\ufff5\104\ufff5\001\002\000\030\004\032\005\015\006" +
    "\014\011\022\025\033\033\013\035\020\040\uffb1\053\024" +
    "\104\uffb1\106\016\001\002\000\006\040\uffff\104\uffff\001" +
    "\002\000\006\040\ufff6\104\ufff6\001\002\000\006\040\ufffb" +
    "\104\ufffb\001\002\000\010\011\047\013\044\100\uffb1\001" +
    "\002\000\026\012\ufff3\015\ufff3\046\ufff3\100\ufff3\107\ufff3" +
    "\110\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3\001\002\000" +
    "\004\107\053\001\002\000\004\100\uffba\001\002\000\026" +
    "\012\ufff4\015\ufff4\046\ufff4\100\ufff4\107\ufff4\110\ufff4\112" +
    "\ufff4\113\ufff4\114\ufff4\115\ufff4\001\002\000\004\100\051" +
    "\001\002\000\004\046\052\001\002\000\030\004\uffbc\005" +
    "\uffbc\006\uffbc\011\uffbc\025\uffbc\033\uffbc\035\uffbc\040\uffbc" +
    "\053\uffbc\104\uffbc\106\uffbc\001\002\000\006\011\047\013" +
    "\044\001\002\000\004\100\uffbb\001\002\000\006\011\047" +
    "\013\044\001\002\000\006\015\142\100\uffb1\001\002\000" +
    "\006\012\106\100\112\001\002\000\004\100\061\001\002" +
    "\000\004\103\062\001\002\000\026\004\032\005\015\006" +
    "\014\011\022\025\033\033\013\035\020\053\024\104\uffb1" +
    "\106\016\001\002\000\004\104\064\001\002\000\034\004" +
    "\uffb1\005\uffb1\006\uffb1\007\073\010\071\011\uffb1\025\uffb1" +
    "\033\uffb1\035\uffb1\040\uffb1\053\uffb1\104\uffb1\106\uffb1\001" +
    "\002\000\006\007\uffe8\010\uffe8\001\002\000\006\007\073" +
    "\010\071\001\002\000\030\004\uffea\005\uffea\006\uffea\011" +
    "\uffea\025\uffea\033\uffea\035\uffea\040\uffea\053\uffea\104\uffea" +
    "\106\uffea\001\002\000\030\004\uffe9\005\uffe9\006\uffe9\011" +
    "\uffe9\025\uffe9\033\uffe9\035\uffe9\040\uffe9\053\uffe9\104\uffe9" +
    "\106\uffe9\001\002\000\004\077\077\001\002\000\030\004" +
    "\uffec\005\uffec\006\uffec\011\uffec\025\uffec\033\uffec\035\uffec" +
    "\040\uffec\053\uffec\104\uffec\106\uffec\001\002\000\004\103" +
    "\074\001\002\000\026\004\032\005\015\006\014\011\022" +
    "\025\033\033\013\035\020\053\024\104\uffb1\106\016\001" +
    "\002\000\004\104\076\001\002\000\030\004\uffe5\005\uffe5" +
    "\006\uffe5\011\uffe5\025\uffe5\033\uffe5\035\uffe5\040\uffe5\053" +
    "\uffe5\104\uffe5\106\uffe5\001\002\000\006\011\047\013\044" +
    "\001\002\000\004\012\106\001\002\000\004\100\102\001" +
    "\002\000\004\103\103\001\002\000\026\004\032\005\015" +
    "\006\014\011\022\025\033\033\013\035\020\053\024\104" +
    "\uffb1\106\016\001\002\000\004\104\105\001\002\000\006" +
    "\007\uffe6\010\uffe6\001\002\000\006\011\047\013\044\001" +
    "\002\000\010\015\uffe1\046\uffe1\100\uffe1\001\002\000\006" +
    "\007\uffe7\010\uffe7\001\002\000\030\004\uffeb\005\uffeb\006" +
    "\uffeb\011\uffeb\025\uffeb\033\uffeb\035\uffeb\040\uffeb\053\uffeb" +
    "\104\uffeb\106\uffeb\001\002\000\004\103\113\001\002\000" +
    "\004\036\114\001\002\000\004\046\135\001\002\000\006" +
    "\104\uffb1\116\120\001\002\000\004\104\117\001\002\000" +
    "\030\004\uffd9\005\uffd9\006\uffd9\011\uffd9\025\uffd9\033\uffd9" +
    "\035\uffd9\040\uffd9\053\uffd9\104\uffd9\106\uffd9\001\002\000" +
    "\010\011\130\013\125\105\126\001\002\000\004\104\uffd8" +
    "\001\002\000\004\104\uffd6\001\002\000\006\104\uffb1\116" +
    "\120\001\002\000\004\104\uffd7\001\002\000\006\046\uffde" +
    "\100\uffde\001\002\000\006\046\uffdf\100\uffdf\001\002\000" +
    "\004\046\131\001\002\000\006\046\uffdd\100\uffdd\001\002" +
    "\000\026\004\032\005\015\006\014\011\022\025\033\033" +
    "\013\035\020\040\uffb1\053\024\106\016\001\002\000\004" +
    "\040\133\001\002\000\004\046\134\001\002\000\006\104" +
    "\uffd4\116\uffd4\001\002\000\026\004\032\005\015\006\014" +
    "\011\022\025\033\033\013\035\020\040\uffb1\053\024\106" +
    "\016\001\002\000\004\040\137\001\002\000\004\046\140" +
    "\001\002\000\006\104\uffd5\116\uffd5\001\002\000\004\100" +
    "\uffe4\001\002\000\006\011\047\013\044\001\002\000\004" +
    "\100\uffe2\001\002\000\004\100\uffe3\001\002\000\006\040" +
    "\ufff9\104\ufff9\001\002\000\006\040\ufff8\104\ufff8\001\002" +
    "\000\006\040\ufff7\104\ufff7\001\002\000\006\040\ufffc\104" +
    "\ufffc\001\002\000\006\040\ufffd\104\ufffd\001\002\000\004" +
    "\111\153\001\002\000\010\011\130\013\125\105\126\001" +
    "\002\000\004\046\155\001\002\000\030\004\uffd3\005\uffd3" +
    "\006\uffd3\011\uffd3\025\uffd3\033\uffd3\035\uffd3\040\uffd3\053" +
    "\uffd3\104\uffd3\106\uffd3\001\002\000\006\040\ufffe\104\ufffe" +
    "\001\002\000\014\011\047\013\044\017\163\021\170\024" +
    "\162\001\002\000\030\004\uffb6\005\uffb6\006\uffb6\011\uffb6" +
    "\025\uffb6\033\uffb6\035\uffb6\040\uffb6\053\uffb6\104\uffb6\106" +
    "\uffb6\001\002\000\030\004\uffb5\005\uffb5\006\uffb5\011\uffb5" +
    "\025\uffb5\033\uffb5\035\uffb5\040\uffb5\053\uffb5\104\uffb5\106" +
    "\uffb5\001\002\000\004\077\217\001\002\000\004\077\211" +
    "\001\002\000\012\112\201\113\176\114\200\115\175\001" +
    "\002\000\030\004\uffb3\005\uffb3\006\uffb3\011\uffb3\025\uffb3" +
    "\033\uffb3\035\uffb3\040\uffb3\053\uffb3\104\uffb3\106\uffb3\001" +
    "\002\000\030\004\uffb2\005\uffb2\006\uffb2\011\uffb2\025\uffb2" +
    "\033\uffb2\035\uffb2\040\uffb2\053\uffb2\104\uffb2\106\uffb2\001" +
    "\002\000\030\004\uffb4\005\uffb4\006\uffb4\011\uffb4\025\uffb4" +
    "\033\uffb4\035\uffb4\040\uffb4\053\uffb4\104\uffb4\106\uffb4\001" +
    "\002\000\004\077\171\001\002\000\006\011\047\013\044" +
    "\001\002\000\004\100\173\001\002\000\004\046\174\001" +
    "\002\000\030\004\uffb7\005\uffb7\006\uffb7\011\uffb7\025\uffb7" +
    "\033\uffb7\035\uffb7\040\uffb7\053\uffb7\104\uffb7\106\uffb7\001" +
    "\002\000\006\011\uffbf\013\uffbf\001\002\000\006\011\uffc0" +
    "\013\uffc0\001\002\000\006\011\047\013\044\001\002\000" +
    "\006\011\uffbe\013\uffbe\001\002\000\006\011\uffc1\013\uffc1" +
    "\001\002\000\014\046\uffb1\112\201\113\176\114\200\115" +
    "\175\001\002\000\004\046\210\001\002\000\006\011\047" +
    "\013\044\001\002\000\004\046\uffc2\001\002\000\014\046" +
    "\uffb1\112\201\113\176\114\200\115\175\001\002\000\004" +
    "\046\uffc3\001\002\000\030\004\uffc4\005\uffc4\006\uffc4\011" +
    "\uffc4\025\uffc4\033\uffc4\035\uffc4\040\uffc4\053\uffc4\104\uffc4" +
    "\106\uffc4\001\002\000\012\011\130\013\125\100\uffb1\105" +
    "\126\001\002\000\004\100\uffd1\001\002\000\004\100\215" +
    "\001\002\000\004\100\uffd0\001\002\000\004\046\216\001" +
    "\002\000\030\004\uffd2\005\uffd2\006\uffd2\011\uffd2\025\uffd2" +
    "\033\uffd2\035\uffd2\040\uffd2\053\uffd2\104\uffd2\106\uffd2\001" +
    "\002\000\004\105\220\001\002\000\004\100\221\001\002" +
    "\000\004\053\222\001\002\000\004\046\223\001\002\000" +
    "\030\004\uffbd\005\uffbd\006\uffbd\011\uffbd\025\uffbd\033\uffbd" +
    "\035\uffbd\040\uffbd\053\uffbd\104\uffbd\106\uffbd\001\002\000" +
    "\006\040\ufffa\104\ufffa\001\002\000\010\011\130\013\125" +
    "\105\126\001\002\000\004\100\227\001\002\000\004\046" +
    "\230\001\002\000\030\004\uffe0\005\uffe0\006\uffe0\011\uffe0" +
    "\025\uffe0\033\uffe0\035\uffe0\040\uffe0\053\uffe0\104\uffe0\106" +
    "\uffe0\001\002\000\006\002\uffb1\034\235\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffb1\034\235\001\002\000" +
    "\004\002\uffce\001\002\000\004\011\236\001\002\000\010" +
    "\046\uffb1\047\uffb1\117\240\001\002\000\006\046\uffb1\047" +
    "\253\001\002\000\004\011\242\001\002\000\006\046\uffcb" +
    "\047\uffcb\001\002\000\010\046\uffb1\047\uffb1\107\243\001" +
    "\002\000\006\011\250\114\247\001\002\000\006\046\uffcc" +
    "\047\uffcc\001\002\000\006\046\uffc9\047\uffc9\001\002\000" +
    "\006\046\uffca\047\uffca\001\002\000\006\046\uffc5\047\uffc5" +
    "\001\002\000\006\046\uffc6\047\uffc6\001\002\000\004\046" +
    "\uffc7\001\002\000\004\046\255\001\002\000\004\011\254" +
    "\001\002\000\004\046\uffc8\001\002\000\006\002\uffcd\034" +
    "\uffcd\001\002\000\004\002\uffcf\001\002\000\004\077\260" +
    "\001\002\000\006\053\261\100\uffb1\001\002\000\004\011" +
    "\277\001\002\000\006\100\uffb1\107\273\001\002\000\004" +
    "\100\265\001\002\000\004\100\ufff0\001\002\000\004\103" +
    "\266\001\002\000\026\004\032\005\015\006\014\011\022" +
    "\025\033\033\013\035\020\053\024\104\uffb1\106\016\001" +
    "\002\000\004\104\270\001\002\000\004\040\271\001\002" +
    "\000\004\011\272\001\002\000\030\004\ufff2\005\ufff2\006" +
    "\ufff2\011\ufff2\025\ufff2\033\ufff2\035\ufff2\040\ufff2\053\ufff2" +
    "\104\ufff2\106\ufff2\001\002\000\006\053\261\100\uffb1\001" +
    "\002\000\004\100\ufff1\001\002\000\004\100\uffee\001\002" +
    "\000\004\100\uffef\001\002\000\006\100\uffed\107\uffed\001" +
    "\002\000\026\004\032\005\015\006\014\011\022\025\033" +
    "\033\013\035\020\053\024\104\uffb1\106\016\001\002\000" +
    "\004\104\302\001\002\000\004\005\303\001\002\000\004" +
    "\077\304\001\002\000\006\011\047\013\044\001\002\000" +
    "\004\100\306\001\002\000\030\004\uffdc\005\uffdc\006\uffdc" +
    "\011\uffdc\025\uffdc\033\uffdc\035\uffdc\040\uffdc\053\uffdc\104" +
    "\uffdc\106\uffdc\001\002\000\004\053\310\001\002\000\004" +
    "\011\316\001\002\000\004\100\312\001\002\000\004\103" +
    "\313\001\002\000\026\004\032\005\015\006\014\011\022" +
    "\025\033\033\013\035\020\053\024\104\uffb1\106\016\001" +
    "\002\000\004\104\315\001\002\000\030\004\uffdb\005\uffdb" +
    "\006\uffdb\011\uffdb\025\uffdb\033\uffdb\035\uffdb\040\uffdb\053" +
    "\uffdb\104\uffdb\106\uffdb\001\002\000\004\111\317\001\002" +
    "\000\006\011\047\013\044\001\002\000\004\046\321\001" +
    "\002\000\006\011\047\013\044\001\002\000\004\046\323" +
    "\001\002\000\006\011\047\013\044\001\002\000\004\110" +
    "\325\001\002\000\004\100\uffda\001\002\000\004\053\327" +
    "\001\002\000\004\107\333\001\002\000\004\100\331\001" +
    "\002\000\004\046\332\001\002\000\030\004\uffb9\005\uffb9" +
    "\006\uffb9\011\uffb9\025\uffb9\033\uffb9\035\uffb9\040\uffb9\053" +
    "\uffb9\104\uffb9\106\uffb9\001\002\000\004\011\334\001\002" +
    "\000\004\107\335\001\002\000\006\011\047\013\044\001" +
    "\002\000\004\107\337\001\002\000\006\011\047\013\044" +
    "\001\002\000\004\100\uffb8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\016\005\036\010" +
    "\022\015\024\021\025\022\033\024\035\027\020\035\030" +
    "\051\027\053\026\056\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\223\005\036\010" +
    "\022\015\024\021\025\022\033\024\035\027\020\035\030" +
    "\051\027\053\026\056\034\001\001\000\002\001\001\000" +
    "\032\003\155\005\036\010\022\015\024\021\025\022\033" +
    "\024\035\027\020\035\030\051\027\053\026\056\034\001" +
    "\001\000\002\001\001\000\032\003\150\005\036\010\022" +
    "\015\024\021\025\022\033\024\035\027\020\035\030\051" +
    "\027\053\026\056\034\001\001\000\032\003\147\005\036" +
    "\010\022\015\024\021\025\022\033\024\035\027\020\035" +
    "\030\051\027\053\026\056\034\001\001\000\032\003\146" +
    "\005\036\010\022\015\024\021\025\022\033\024\035\027" +
    "\020\035\030\051\027\053\026\056\034\001\001\000\032" +
    "\003\145\005\036\010\022\015\024\021\025\022\033\024" +
    "\035\027\020\035\030\051\027\053\026\056\034\001\001" +
    "\000\032\003\144\005\036\010\022\015\024\021\025\022" +
    "\033\024\035\027\020\035\030\051\027\053\026\056\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\041\005\036\010\022\015\024\021\025\022\033\024\035" +
    "\027\020\035\030\051\027\053\026\056\034\001\001\000" +
    "\032\003\040\005\036\010\022\015\024\021\025\022\033" +
    "\024\035\027\020\035\030\051\027\053\026\056\034\001" +
    "\001\000\002\001\001\000\032\003\037\005\036\010\022" +
    "\015\024\021\025\022\033\024\035\027\020\035\030\051" +
    "\027\053\026\056\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\044\024\045\052" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\053\001\001\000\002" +
    "\001\001\000\010\007\056\017\055\020\057\001\001\000" +
    "\006\024\142\026\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\062\005\036\010" +
    "\022\015\024\021\025\022\033\024\035\027\020\035\030" +
    "\051\027\053\026\056\034\001\001\000\002\001\001\000" +
    "\014\011\071\012\064\013\065\014\066\024\067\001\001" +
    "\000\002\001\001\000\006\012\107\014\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\074\005\036\010" +
    "\022\015\024\021\025\022\033\024\035\027\020\035\030" +
    "\051\027\053\026\056\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\077\017\055\020\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\103\005\036\010\022\015\024\021\025\022\033" +
    "\024\035\027\020\035\030\051\027\053\026\056\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\115\032\114\001\001" +
    "\000\002\001\001\000\010\024\121\031\122\033\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\121\031\122\033\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\131\005\036\010\022\015\024\021\025" +
    "\022\033\024\035\027\020\035\030\051\027\053\026\056" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\135\005\036\010\022\015\024\021" +
    "\025\022\033\024\035\027\020\035\030\051\027\053\026" +
    "\056\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\077\017\055" +
    "\020\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\007\163\034\165\045\164\050\166\055" +
    "\160\057\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\204\046\202\047\203" +
    "\001\001\000\002\001\001\000\004\007\205\001\001\000" +
    "\002\001\001\000\010\024\204\046\206\047\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\211\024" +
    "\213\036\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\233\037\231\043\232\001\001\000" +
    "\002\001\001\000\010\024\233\037\255\043\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\240\040" +
    "\236\001\001\000\006\024\250\044\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\244\042\243\001" +
    "\001\000\004\041\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\262\006\261\024\263\001\001" +
    "\000\002\001\001\000\006\024\274\025\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\266\005\036\010\022\015\024\021\025\022\033\024" +
    "\035\027\020\035\030\051\027\053\026\056\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\275\006\261\024\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\300\005\036\010\022\015\024" +
    "\021\025\022\033\024\035\027\020\035\030\051\027\053" +
    "\026\056\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\077\017\055\020\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\313\005\036\010\022\015\024\021\025" +
    "\022\033\024\035\027\020\035\030\051\027\053\026\056" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\317\001\001\000\002\001\001\000" +
    "\006\007\077\017\321\001\001\000\002\001\001\000\004" +
    "\007\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\335\001\001\000\002\001\001" +
    "\000\004\007\337\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EMPTY ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EMPTY",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // HACERMAS ::= CONVERTIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACERMAS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // HACERMAS ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACERMAS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // HACERMAS ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACERMAS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // HACERMAS ::= TRIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACERMAS",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // HACER ::= Identificador Igual HACERMAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HACER",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TRIGO ::= Trigonometria AbriPar DECLARACION CierraPar TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRIGO",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RANDOMOTRO ::= Tipo Coma Identificador Coma DECLARACION Coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RANDOMOTRO",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RANDOM ::= Aleatorio AbriPar RANDOMOTRO CierraPar TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RANDOM",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LIMPIARMAS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIMPIARMAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LIMPIARMAS ::= DECLARACION Coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIMPIARMAS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LIMPIAR ::= Limpia AbriPar LIMPIARMAS CierraPar TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIMPIAR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LEER ::= Leer AbriPar Literal CierraPar Tipo TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MATES ::= Por 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MATES ::= Dividido 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MATES ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATES ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MATES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OTRAMATE ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTRAMATE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OTRAMATE ::= MATES DECLARACION OTRAMATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OTRAMATE",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= DECLARACION MATES DECLARACION OTRAMATE TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LIBRERIASFINAL ::= Por 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASFINAL",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LIBRERIASFINAL ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASFINAL",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LIBRERIASASIGN ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASASIGN",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LIBRERIASASIGN ::= Alias Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASASIGN",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LIBRERIASOTRO ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASOTRO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LIBRERIASOTRO ::= Coma LIBRERIASFINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASOTRO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LIBRERIASMAS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASMAS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LIBRERIASMAS ::= Desde Identificador LIBRERIASOTRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASMAS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LIBRERIA ::= Importar Identificador LIBRERIASMAS LIBRERIASASIGN TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LIBRERIAS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALORESCON ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORESCON",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VALORESCON ::= VALORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORESCON",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONVERTIR ::= Convertir AbriPar VALORESCON CierraPar TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONVERTIR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLAVAR ::= Tipo Identificador Igual VALORES TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLAVAR",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASO ::= Caso VALORES TerminarIns SENTENCIA Salto TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFAULT ::= Excepcion TerminarIns SENTENCIA Salto TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASOSMAS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOSMAS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CASOSMAS ::= CASO CASOSMAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOSMAS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASOS ::= DEFAULT CASOSMAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASOS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SWITCH ::= Evaluar AbriPar DECLARACION CierraPar AbriLla CASOS CierraLla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FORCONDI ::= Tipo Identificador Igual DECLARACION TerminarIns CONDICION TerminarIns DECLARACION Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FORCONDI",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= CicloF AbriPar FORCONDI CierraPar AbriLla SENTENCIA CierraLla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO ::= CicloD AbriLla SENTENCIA CierraLla CicloD AbriPar CONDICIONES CierraPar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALORES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALORES ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALORES ::= Literal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // WRITE ::= Imprimir AbriPar VALORES CierraPar TerminarIns 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WRITE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= DECLARACION OperadorRelacional DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICIONESOTRO ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONESOTRO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICIONESOTRO ::= Logico CONDICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONESOTRO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICIONES ::= CONDICION CONDICIONESOTRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSE ::= OtroCasoUlt AbriLla SENTENCIA CierraLla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IFELSE ::= OtroCaso AbriPar CONDICIONES CierraPar AbriLla SENTENCIA CierraLla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFELSES ::= IFELSES IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFELSES ::= IFELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFELSES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFOTROS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFOTROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IFOTROS ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFOTROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFOTROS ::= IFELSES ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFOTROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= Evaluar AbriPar CONDICIONES CierraPar AbriLla SENTENCIA CierraLla IFOTROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETRO ::= Tipo Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETROOTRO ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROOTRO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PARAMETROOTRO ::= Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROOTRO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= PARAMETRO PARAMETROOTRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= Fun Identificador AbriPar PARAMETROS CierraPar AbriLla SENTENCIA CierraLla Salto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= EMPTY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= HACER SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= RANDOM SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= LIMPIAR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLAVAR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SWITCH SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= FOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= WRITE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= IF SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= FUNCION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Tipo Principal AbriPar CierraPar AbriLla SENTENCIA CierraLla LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

